LOAD #9       ; init l'adresse de GLOBAL
STORE 3       ; PILE <- ACC
LOAD #9       ; init l'adresse de la pile
STORE 2       ; PILE <- ACC
LOAD #10      ; ##DECLA FCT: fibonacci##
STORE 1       ; LIGNE FCT
LOAD 1        ; ADR FCT <- LIGNE FCT
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
JUMP 36       ; ##FIN DECLA FCT## // JUMP Apres instructions FONCTION
LOAD 2        ; ##DEBUT fibonacci## // ACC <- PILE
STORE 4       ; LOCAL <- ACC
LOAD #19      ; LIGNE RETOUR
STORE 6       ; RETOUR_FCT <- LIGNE RETOUR
LOAD #-999    ; VALEUR RETOUR PAR DEFAUT
STORE 7       ; VALEUR RETOUR <- DEFAUT
LOAD 2        ; ACC <- ADR PILE
SUB #1        ; ACC <- ACC + ADRESSE PILE
STORE 4       ; (FIN CHGT PILE) // Place LOCAL au debut des DECL & param
LOAD 2        ; ##FIN fibonacci## // ACC <- ADRESSE PILE
SUB #1        ; ACC <- ACC - NB Variables declarees& param
STORE 2       ; Recule la PILE
DEC 2         ; DEPILER
LOAD @2       ; ACC <- ADR_AFFECT avant FCT
STORE 5       ; REOUR_FCT <- ACC
DEC 2         ; DEPILER
LOAD @2       ; ACC <- LOCAL avant appel FCT
STORE 4       ; LOCAL <- ACC
DEC 2         ; DEPILER
LOAD @2       ; ACC <- RETOUR_FCT avant FCT
STORE 6       ; REOUR_FCT <- ACC
DEC 2         ; DEPILER
LOAD @2       ; ACC <- LIGNE A JUMP APRES RETOUR FCT
STORE 1       ; TEMP <- LIGNE A JUMP APRES RETOUR FCT
LOAD 7        ; VALEUR RETOUR PAR DEFAUT
JUMP @1       ; (RETOUR FCT) // JUMP A l'appel de FCT
LOAD 3        ; ##DECLA FCT: fibonacci##
ADD #0        ; ACC + ADR RELATIVE
STORE 1       ; ADR FCT
LOAD #42      ; LIGNE FCT
STORE @1      ; ADR FCT <- LIGNE APPEL FCT
JUMP 166      ; ##FIN DECLA FCT## // JUMP Apres instructions FONCTION
LOAD 2        ; ##DEBUT fibonacci## // ACC <- PILE
STORE 4       ; LOCAL <- ACC
LOAD #149     ; LIGNE RETOUR
STORE 6       ; RETOUR_FCT <- LIGNE RETOUR
LOAD #-999    ; VALEUR RETOUR PAR DEFAUT
STORE 7       ; VALEUR RETOUR <- DEFAUT
LOAD 2        ; ACC <- ADR PILE
SUB #1        ; ACC <- ACC + ADRESSE PILE
STORE 4       ; (FIN CHGT PILE) // Place LOCAL au debut des DECL & param
LOAD 4        ; (DEBUT ID) // ACC <- adresse LOCAL
ADD #0        ; ACC + position relative de  i
STORE 1       ; TEMP <- ACC (ID)
LOAD @1       ; (FIN ID) // ACC <- i
LOAD 0        ; (DEBUT OP) // EMPILE EXP1 de l'op : EXP1 OP EXP2
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD #1       ; ACC <- 1
STORE 1       ; TEMP <- ACC (EXP2)
DEC 2         ; DEPILER
LOAD @2       ; EXP1
SUB 1         ; (DEBUT OP <=) // ACC <- ACC (EXP1) - TEMP (EXP2)
DEC 0         ; ACC <- ACC - 1
JUML 67       ; JUMP 3 lignes en dessous si <= est vrai 
LOAD #0       ; ACC <- 0 car <= est faux 
JUMP 68       ; (FIN OP <=) // JUMP 2 lignes en dessous
LOAD #1       ; (FIN OP <=) // ACC <- 1 car <= est vrai
JUMZ 76       ; (DEBUT SI) // JUMP a SINON si exp = 0
LOAD 4        ; (DEBUT ID) // ACC <- adresse LOCAL
ADD #0        ; ACC + position relative de  i
STORE 1       ; TEMP <- ACC (ID)
LOAD @1       ; (FIN ID) // ACC <- i
STORE 7       ;  (DEBUT RETURN) // RETOUR_FCT <- LIGNE RETOUR
JUMP @6       ;  JUMP Apres les instructions de FONCTION
JUMP 148      ; (FIN SI) // JUMP APRES INST SINON
LOAD #108     ; (DEBUT APPEL) // ACC <- ADR RETOUR APRES APPEL
LOAD 0        ; 
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 6        ; ACC <- LIGNE FIN INST DE FCT
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 4        ; ACC <- ADR DEBUT LOCAL
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 5        ; ACC <- ADR_AFFECT
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 4        ; (DEBUT ID) // ACC <- adresse LOCAL
ADD #0        ; ACC + position relative de  i
STORE 1       ; TEMP <- ACC (ID)
LOAD @1       ; (FIN ID) // ACC <- i
LOAD 0        ; (DEBUT OP) // EMPILE EXP1 de l'op : EXP1 OP EXP2
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD #2       ; ACC <- 2
STORE 1       ; TEMP <- ACC (EXP2)
DEC 2         ; DEPILER
LOAD @2       ; EXP1
SUB 1         ; (FIN OP -) // ACC <- ACC (EXP1) - TEMP (EXP2)
LOAD 0        ; ACC = EXP de liste a empiler
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 3        ; ACC <- ADR DEBUT GLOBAL
ADD #0        ; ACC + ADR RELATIVE FCT
LOAD @0       ; ACC <- ADR LIGNE FCT
JUMP @0       ; (FIN APPEL FCT) // JUMP au debut de la FCT
LOAD 0        ; (DEBUT OP) // EMPILE EXP1 de l'op : EXP1 OP EXP2
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD #143     ; (DEBUT APPEL) // ACC <- ADR RETOUR APRES APPEL
LOAD 0        ; 
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 6        ; ACC <- LIGNE FIN INST DE FCT
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 4        ; ACC <- ADR DEBUT LOCAL
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 5        ; ACC <- ADR_AFFECT
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 4        ; (DEBUT ID) // ACC <- adresse LOCAL
ADD #0        ; ACC + position relative de  i
STORE 1       ; TEMP <- ACC (ID)
LOAD @1       ; (FIN ID) // ACC <- i
LOAD 0        ; (DEBUT OP) // EMPILE EXP1 de l'op : EXP1 OP EXP2
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD #1       ; ACC <- 1
STORE 1       ; TEMP <- ACC (EXP2)
DEC 2         ; DEPILER
LOAD @2       ; EXP1
SUB 1         ; (FIN OP -) // ACC <- ACC (EXP1) - TEMP (EXP2)
LOAD 0        ; ACC = EXP de liste a empiler
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 3        ; ACC <- ADR DEBUT GLOBAL
ADD #0        ; ACC + ADR RELATIVE FCT
LOAD @0       ; ACC <- ADR LIGNE FCT
JUMP @0       ; (FIN APPEL FCT) // JUMP au debut de la FCT
STORE 1       ; TEMP <- ACC (EXP2)
DEC 2         ; DEPILER
LOAD @2       ; EXP1
ADD 1         ; (FIN OP +) // ACC <- ACC (EXP1) + TEMP (EXP2)
STORE 7       ;  (DEBUT RETURN) // RETOUR_FCT <- LIGNE RETOUR
JUMP @6       ;  JUMP Apres les instructions de FONCTION
LOAD 2        ; ##FIN fibonacci## // ACC <- ADRESSE PILE
SUB #1        ; ACC <- ACC - NB Variables declarees& param
STORE 2       ; Recule la PILE
DEC 2         ; DEPILER
LOAD @2       ; ACC <- ADR_AFFECT avant FCT
STORE 5       ; REOUR_FCT <- ACC
DEC 2         ; DEPILER
LOAD @2       ; ACC <- LOCAL avant appel FCT
STORE 4       ; LOCAL <- ACC
DEC 2         ; DEPILER
LOAD @2       ; ACC <- RETOUR_FCT avant FCT
STORE 6       ; REOUR_FCT <- ACC
DEC 2         ; DEPILER
LOAD @2       ; ACC <- LIGNE A JUMP APRES RETOUR FCT
STORE 1       ; TEMP <- LIGNE A JUMP APRES RETOUR FCT
LOAD 7        ; VALEUR RETOUR PAR DEFAUT
JUMP @1       ; (RETOUR FCT) // JUMP A l'appel de FCT
LOAD 3        ; ##DEBUT MAIN## // ACC <- PILE
ADD #1        ; AVANCE LA PILE DU NB DE VAR LOCALES
STORE 2       ; 
STORE 4       ; LOCAL <- ACC
LOAD #209     ; LIGNE FIN MAIN
STORE 6       ; LIGNE FIN MAIN
LOAD 4        ; (DEBUT DECLA) // ACC <- adresse LOCAL
ADD #0        ; ACC + position relative de  i
STORE 5       ; stocke l'adresse de i
STORE @5      ; (FIN DECLA) // i <- ACC
LOAD 2        ; ACC <- ADR PILE
ADD #1        ; ACC <- ACC + ADRESSE PILE
STORE 2       ; (FIN CHGT PILE) // Place LOCAL au debut des DECL & param
LOAD 4        ; (DEBUT AFFECT) // ACC <- adresse LOCAL
ADD #0        ; ACC - position relative de  i
STORE 5       ; stocke l'adresse de i
READ          ; ACC <- ENTREE[I++]
STORE @5      ; (FIN AFFECT) // i <- ACC
LOAD #208     ; (DEBUT APPEL) // ACC <- ADR RETOUR APRES APPEL
LOAD 0        ; 
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 6        ; ACC <- LIGNE FIN INST DE FCT
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 4        ; ACC <- ADR DEBUT LOCAL
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 5        ; ACC <- ADR_AFFECT
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 4        ; (DEBUT ID) // ACC <- adresse LOCAL
ADD #0        ; ACC + position relative de  i
STORE 1       ; TEMP <- ACC (ID)
LOAD @1       ; (FIN ID) // ACC <- i
LOAD 0        ; ACC = EXP de liste a empiler
STORE @2      ; EMPILER
INC 2         ; FIN EMPILER
LOAD 3        ; ACC <- ADR DEBUT GLOBAL
ADD #0        ; ACC + ADR RELATIVE FCT
LOAD @0       ; ACC <- ADR LIGNE FCT
JUMP @0       ; (FIN APPEL FCT) // JUMP au debut de la FCT
WRITE         ; SORTIE[I++] <- ACC
STOP